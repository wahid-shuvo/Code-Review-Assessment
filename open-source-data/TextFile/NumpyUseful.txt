20115	This looks like a good fix, the new data makes it clearer what is going on.
20088	Thanks, annoying complexity here with that value-based promotion/casting :(. An obvious fix though, since it just extends the ugly logic from above.My only comment is to try to be a bit more clear that this helper only makes sense in the context of np.result_type
20088	Maybe rename to get_descr_from_cast_or_value? But not sure.
20088	(I am tempted to overindent the arguments, but it is probably just me who does that...)
20071	If these imports are unused they can be removed. The only imports that matter in the array_api are the ones in __init__.py
20061	MaybeWhen both ``x1`` and ``x2`` are of an integer type, equivalent to `numpy.true_divide`
20059	I wonder if shutil.rmtree(output_dir, ignore_errors=True) might be a bit more idiomatic? Avoid catching a generic Exception, take advantage of an API that was designed with the failure case (directory doesn't exist, etc.) in mind?
20047	Additionally, I think you can show that b.flags["WRITEABLE"] is True before this line if you think it makes sense.
20047	The refguide check (and subsequently the build) is failing because it expects this:>>> barray([3, 2, 3])
20019	The LGTM warning is a bit nitpicky in my opinion, but the proposed change looks fine.
20004	The typo fixes look good, can you remove the .replit file this added? Thanks
20004	atleast is a function name, so it should not be corrected. More precisely, it turns up as atleast_(1d|2d|3d)
20000	Can you add the NumPy version in the message? Just for completeness sake (could just be a parantheses at the end, I guess, like (warning added in NumPy 1.22). I know that most older warnings don't have it, but it is nice, I think.
19997	I don't see why this dedent should be necessary?But otherwise, I am happy if this just goes in.
19997	This part, which I assume leads to the doc change need, is confusing me slightly. Anyway, I am happy with this, and OK with just putting this in as a step in the right direction in any case. Are Pearu or Melissa following these f2py issues?
19997	Ooops, blind replacement doesn't always work :).I wonder if these shouldn't be 4 spaces rather than the tab character though, we don't really use hard-tabs anywhere.
19992	This is a bit odd, having one blank line between methods is preferred.
19992	he doucumented nagfor option is -unsharedrts, not -unsharedf95.
19988	Should the other reference links be changed to include the page number?
19988	Most of the references have a page number, just not in the link. The argument for making the fix now is that it will otherwise slip into the background and get lost.
19978	It seems weird to assign .r to clongdouble? Unless you also add the .r on the right hand side? The +sizeof(npy_clongdouble) seems just wrong? (Would be nice to have a test that fails, but I know that is pushing it, probably...)
19977	I suspect clang-tidy might be a problem. Why not run clang-format -i <path-to-file> ? It gives me better results than I see here.
19969	I'm guessing this is a typo in the spec, since the spec never mentions None other than by the use of Optional.
19957	I'd actually suggest including a label for the f2py main documentation page and referencing it here:Suggested change The interface definition file (.pyf) is how you can fine-tune the interfacebetween Python and Fortran. There is decent documentation for f2py found on theNumPy documentation site at https://numpy.org/devdocs/f2py/index.html. There isalso more information on using f2py (including how to use it to wrap C codes) athttps://scipy-cookbook.readthedocs.io under the "Interfacing With OtherLanguages" heading.The interface definition file (.pyf) is how you can fine-tune the interfacebetween Python and Fortran. There is decent documentation for f2py at:ref:`f2py`. There is also more information on using f2py (including how to useit to wrap C codes) at the `"Interfacing With Other Languages" heading of theSciPy Cookbook.<https://scipy-cookbook.readthedocs.io/items/idx_interfacing_with_other_languages.html>`_and adding .. _f2py: to the top of doc/source/f2py/index.rst
19953	Hmm. Don't know of one for sure, but it looks like line continuation works inside the quotes>>> """... Hello \... World... """'\nHello World\n'The problem might be the indentation of the next line cannot be aligned with the opening "(", but that might not matter.
19937	Not critical for this PR, but Device is currently defined as an alias for Any. Based on how it's used throughout the API implementation you should be able to narrow it down to a string-literal.
19925	Thanks, looks good, except that key is already being decref'd by the fail cleanup.
19921	I think we should, yes. As a safeguard against forgetfulness I would recommend placing a note though:- delimitor=...,+ # NOTE: deprecated+ # delimitor=...,  
19921	It should be commented. delimitor is a (now-deprecated) alias for delimiter, a deprecation that we'd want to be treating as if it were completed in the stub file.
19921	I suppose considering how exotic this function is, we can likely get away with changing it. But it will have to be a proper deprecation then: give a deprecation warning (with a test), so that we can officially remove it in two versions.in the style of numpy.deprecate()?You can probably ignore that... Just give a Deprecation warning, and end on a note about the current version of NumPy (1.22). (You can search the code for DEPRECATED or DeprecationWarning, for examples I guess).
19921	Might as well add the , *, to make this keyword only.
19921	See #19921 (comment) for a suggestion.The usual approach with annotations and deprecations is to pretend that the deprecation has already been completed, i.e. as if the delimitor parameters has been removed in this particular case.
19921	Unless you are tired of updating... we have to start somewhere to use the better versions for these things (assert_deprecated doesn't apply, this is a different file.)
19921	I don't think this quite works. Suppose I used fromtextfile("a.txt", ","). Then I will get a warning. It is a real pain to do this completely correctly (I think it requires moving to *args, and **kwargs and then a lot of manual parsing. You might simple add to the warning string when delimiter is not None that end users can use the keyword argument delimitor=value to silence the warning, since you don't know if they really misspelled it or not.
19921	The only problem I see is if the user passes delimitor=None. The solution to which is using np._NoValue rather than None? I assume we have tests that would fail if fromtextfile("a.txt", ",") gave a spurious warning?
19920	Personally, I would prefer spelling the "is" out. Formal written out text should not normally use '? The usable surprised me, but seems like generally the more typical spelling.
19916	This shouldn't be needed, since with statements are in 2.7
19916	Feel free to tweak the wording to whatever you think drives the point home, I wasn't able to make this as a suggestion on github.
19911	This fix is wrong. The work is not vacuum. It is essentially v_accum.
19911	Please restore all vaccum to vaccum, or possibly change to v_accum.
19911	I'm always weary of correcting variable names even if there is a typo, just my 2 cents here.
19903	I think you removed this line by accident
19893	Maybe "as well as the build_ext and build_clib commands that are also ..."
19893	Commas around "or simply contiguous arrays"."refer to data stored rowwise"
19893	"F2PY automatically generates as few ..., e.g., "
19893	Replace "So" by "In such cases"
19893	Replace "emitted" by "written"
19893	Replace "printed" by "written"
19893	Maybe a definition list?
19884	    config_vars["platlibdir"] = getattr(sys, 'platlibdir', '')  # Python3.9+Do we even need this? If it isn't there, presumably the get_path doesn't use it?
19869	By the looks of the array-subclass tests are also missing from the nanmedian test suite.Might it be an idea to add this new test there as well?
19869	Thanks for checking that. If out isn't used it would be best to remove it and document the assumptions about how the function should be used.
19863	The ids look to be in reverse order here and below.
19849	I have a feeling that Universal Functions is a "proper name" and should be capitalized, but I'd defer to a native English speaker to confirmâ€¦
19849	Similarly, I think Trac is a proper name and should be capitalized.
19849	Any reason to remove this date?
19849	I am mixed on this, Roadmap is usually capitalized everywhere I look... I don't have strong feelings either way but not sure about the sentence case rule here.
19844	I can't review the technical details, so I'll leave that for others to look at. The only question I have is if the core/include/numpy/multiarray_api.txt file also needs to be updated to include the "docstring" for PyArray_CopyObject- I'm not sure what is the function of that file.
19821	LGTM, couple of nits. I assume the main fix here is for the case of non-array objects being returned.
19818	You should remove this line too
19818	is identical but more readable.
19814	Could you add a space after the colon for all of these? Just to increase the chance that the user has it in there.
19814	I think markdown renders here?
19814	I would be happy to move forward with this and iterate more when we feel something else should be done.SciPy has a bit of additional text:Thank you for taking the time to file a bug report.Before continuing, please check the issue tracker for existing issues and the development documentation. Your issue could be already fixed on the development versionAdding something like this seems good to me. I might personally write something in the direction of: Thank you... Before creating a new issue, please make sure to take a few minutes to...But, we can do all of that in a followup, below two small nitpicks.
19814	Breaking the line here renders this break in the final form:I believe if you use the character > instead of | at the value: line, the line break in the source file is not respected when rendering, which should fix this issue. Can you try this out?
19805	We'll let the compiler to validate --> We'll let the compiler validateMinor comment modification
19781	Could you merge the check in lines 667-671 into this loop so we iterate once over arrayList
19781	Couldn't this be written more compactly without the loop as assert_almost_equal(y, y_r)? What am I missing?Edit: same thing in the following changes in this file
19781	Thanks, I was paying attention to this aspect, as zip will stop on the shortest iteration. But also x[i], y[i] would have raised IndexError before if they were different lengths.
19781	Does this need a if len(res) != len(desired): raise ... or is it guarenteed that they will be equal length in all the tests?
19776	I don't think this is correct. There's both the squaring and addition operations to consider: doesn't the addition require 101**2 operations?In any case, my two cents is that this could benefit from less detail as it's easy to lose the forest through the trees here. I'd advocate for chopping out the text from Here,: IMO the best way to provide more detail would be to add a reference to the 2011 NumPy paper, which has an excellent detailed example of broadcasting with "sparse" arrays.Just my two cents though - leaving the detail is also fine, but we should double check to make sure the numbers are correct.
19776	Oops - I only meant that the text about performance should be removed, not the example. I think the clearest way to demonstrate what the sparse kwarg does is to show it Also, it seems that sparse keeps getting replaced with spare in the pushes.
19715	Is this run at all? Please look at the other tests to see how this should be done. The test function should start with def test_ ... and the only parameter in your case should be self. You can make sure your test is run by checking that your test name appears in the output of
19715	this tes tis missing an res.astype(np.float16) to actually exercise the casting code, could you maybe make small PR to add that?
19686	This is a mistake. If you add a space before the function, it will changes the complete functioning of variable, Remove the spacing.
19686	print(",".join("1234"))print(", ".join("1234"))Test both the codes, they will give different outputs. We need to add spaces where there is no change in the output.
19686	Could you also add support for the new "1.21" legacy-option in the arrayprint.pyi stub file?All you'd have to do is a bit of copy pasting with the following pattern:
19663	The fact that the semantics match those of ContextVars does not sound like an implementation detail; only the fact it contains a PyCapsule is. Perhaps something more like:
19663	Shouldn't we just fix our call to free to be consistent here?Or is computing the actual allocated size something that is too expensive to do in every array deallocation?
19645	This info is quite dated - I think it can safely be discarded
19645	I actually don't think this is correct - I tested this by randomly injecting an fft test into a document and running the refguide_check on it and didn't get any failures. Please double-check me, but I think this should be removed.
19645	IMO it's so niche that it's not worth mentioning here --- maybe adding a blurb to the f2py docs would be better.
19645	Actually, this is not even necessary as the documentation for f2py follows a different pattern and does not rely on importing f2py anywhere, so feel free to just remove the note.
19645	Minor improvement: we should use intersphinx for these links.
19638	It probably makes sense to keep the old behavior unless there's a reason not to.
19638	(Not sure what old behavior you're referring to, but making the string more specific sounds good.)
19620	Is it the case that the input to _CONVERTERS is always a str and never bytes? If so, can you add a comment to _getconv saying that the converters are for parsing data from str?
19618	Can you explain this change to an elif?
19618	I think using itemgetter is overkill here, especially as its forcing you to go through a slice which is slower - perhaps better as:
19618	itemgetter is implemented in Python as far as I can tell, so I can't see why it would be faster.
19618	It would be easier to parse this code if this was moved up into the read_data function that is the only place it is used. It could then be handled with the usual if statements.I must say this function is a mess, I salute you for wading through it.
19618	I would use ordinary if statements to define usecols_getter rather than a lengthy right hand side. It would be easier to read and parse.
19616	This logic is not the same as what it used to be when the file is empty; previously it set ncols to len(usecols), but now it sets it to zero.
19610	Can you use an approach more like #19618 here? That way, the logic inside this helper becomes simpler, and as a bonus you only have to do the if statement once per file rather than once per line.
19610	Can you add a note here that where possible the returned converter should be equality-comparable to enable optimizations?
19610	I think you may as well extract this lambda and the other two in this this function as _boolconv, _complexconv, and _intconv; right now your optimization in this PR doesn't work for these types.
19610	At this point you could inline the lambdas into the table without causing any issues.
19609	While not required by variable scoping, perhaps it would be more readable if decode were passed in as an argument to read_data. Or would that slow things down?
19609	Do you think we can eliminate the use of decode_line on lines in the file entirely? Either by detecting whether the file is text right at the beginning:# are we going to break on some janky file-like object that doesn't play ball?needs_decode = not isinstance(fh, io.TextIOBase)or pulling off the first line much earlier:
19609	The only reason I raise it is that this refactor leads to the latin1 encoding cropping up in multiple places.I don't think you do - you can still defer emitting the that warning until you try and count the columns of the file; you can always retry to iterate an empty iterator.hink it may matter if your file starts with 10000 blank lines, and you ask each one whether it is a byte or string
19607	I don't think you need this, the ((b) != (b) && (a) ==(a))) part is for dealing with nans, which isn't a problem with integer types like npy_datetime and npy_timedelta.
19607	What if both a and b are NaT? I note that sort order is not necessarily the same as comparison, which is one of the reasons only LT is used for sorting.
19600	I'd just put this on the previous line and avoid the lint complaint. TBH, I'm not sure why it is complaining :)
19599	If these are lifted from internal helpers inside _loadtxt, we should prefix their names with _loadtxtI think it's probably worth a comment explaining why these are lifted to the top level, and the refcounting / performance problems that putting them inside loadtxt caused.
19599	Please delete it, its just unnecessary garbage code now, it is not like it has any immediate use (or probably even any use at all).
19598	It might be good to add a comment here to explain why the nested try's & ifs.
19598	I think it would be clearer with this if outside the try
19598	Well this line was stupid!
19587	I'd maybe capitalize as NPY_DT_CALL_discover_descr_from_pyobject to make the commonality of these macros even clearer. Or NPY_DT_METH_discover..., etc. (or C_METH?)
19587	Should this also be a macro? NPY_DT_common_instance(common_dtype, result, curr)?
19565	I think this belongs at the end of the section, which would order these functions alphabetically and also make the helper function used after registering the user-defined dtype come after all the registering functions. Also may be worth changing the heading from New data types to User-defined data types.
19565	 I think we should leave this as a hanging reference to remind us to document this function. Unfortunately it is not even documented in the public header file where it is declared, and I don't see any example use of it in tests.
19565	If you really want to expose a new macro, it should be in a separate PR, not in a documentation PR.
19554	Style nit: the PEP 604 pipe operator generally looks cleaner compared to Union/Optional.
19554	Yup, the | syntax has been supported for annotations (not type aliases) since the mypy 0.800 release.
19554	The __<x>item__ dunders can also take slice objects or any object implementing the __index__ methods (not just int)
