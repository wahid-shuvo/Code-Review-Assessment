747528009-80665-u	We are blowing away the task here with `jobTask.markAsFailed(e);`    So, does it make sense to also `stopAssociatedDatafeedForFailedJob(jobTask.getJobId());` when we failed to set the job to failed?    Otherwise, we have a datafeed task around but the job task is gone.
747530042-80665-u	What do you think of auditing a failure to stop?     `TransportStopDatafeedAction` already audits on stop success. I am just wondering if we should alert the user of a weird state.
747351710-80624-u	I think the `resolveRouting(...)` method can now also be removed from `IndexRequest` class? (looks this was the only usage).
747405594-80624-u	Why not add `DocWriteRequest.process()` too to avoid the `if` here?
746889403-80617-u	We should actually just replace this with `versions.getProperty('jna')` to avoid having this duplicated in two places.
746889665-80617-u	If we leverage `versions` in the reference build script instead we can ditch this comment since updating it here will update the build script as well.
745937201-80540-u	I think the `%` here is unnecessary, we can just check for >=, since we reset when submitting the batch?
745943314-80540-u	Can we also assert that no extra request is sent/received when `pendingDeletes.get() == 0`?
745727665-80532-u	Does this mean it will be set to the largest size that could be assigned in the cluster capped at 1024mb?
745920285-80524-u	I wondering if this should even be in user facing documentation at all.
746330948-80493-u	Can we also assert that a key is interned? Could just check that the key on index1 is the same as on index2.
746339379-80493-u	I mainly found it illogical that we do not fully build the parameters for the constructor in the build method like we normally do. I would still prefer it the other way around, but can accept it residing here for now.    I am not sure I found a place where `getByPrefix` needs this, they all look like "get and throw away" style lookups, perhaps you have a specific case. Even if there are such cases, it seems unnecessary to go through the lists once more when all we need is interned keys in that case.
744535214-80475-u	I think we can take this further, let's have two static final values here, `FIELD_DATA_ENABLED` and `FIELD_DATA_DISABLED`, with a static selector method that returns either one of them, and keep the constructor private so that we only ever use these two instances.
744605937-80475-u	Ah, you're quite right, it's an updateable setting.  Can we still rename `DISABLED` no `NO_FIELD_DATA` or something similar to make it clear that we're not disabling the whole mapper?
743946381-80450-u	Can we please log the timezone and the interval in the exception message if this happens? This way if we have missed a case that we are not aware of we'll at least be able to debug it. Perhaps a logger warning too?
743952196-80450-u	I wonder if we can make this constant a field that can be modified with the builder which defaults to 5000? That way we can write a unit test that ensures we correctly throw the exception in case the loop limit is reached.
743952365-80450-u	This is changing behaviour and it's unclear to me how we end up in this state. I'd be concerned that a customer is successfully getting a date now, where their application will effectively break after this change? Is there a way to reproduce this with a unit test? If not maybe we can take the approach to log an error/warning and retain the existing behaviour of returning a value?
744549750-80439-u	The model definition part number or document ID from the search would be useful in this message for debugging.
744571937-80439-u	nit: `Set.of(requiredSourceFields)` can be lifted out of the for loop so it is created everytime
744575901-80439-u	What if there are > 100 definition docs? The summed sizes will never equal expected total.
744584386-80439-u	The reason for making this change is not clear to me. We expect the definition to be base64 encoded, Java UTF-16 characters require 2 bytes to store each base64 character whereas the raw bytes (given UFT-8 encoding) will use half that space. 
745504528-80406-u	I think we can remove the `JsonNode ` usage here as well? And use `XContentMapValues `?
745491256-80406-u	Maybe instead of wrapping multiple if statements, maybe do this: ```java if (flushEnabled.get()) { return;}if (event.metadataChanged() == false) { return;// rest of the code\r\n```I think this is more readable.
744691285-80406-u	Why is databind being used here? I believe in mast of the rest integration test we use `XContentMapValues`, could that be used here as well?
743211781-80378-u	I think this short paragraph is sufficient. We do something similar in the [EQL async search API docs](https://www.elastic.co/guide/en/elasticsearch/reference/master/get-async-eql-search-api.html#get-async-eql-search-api-response-body). I wouldn't go through the hassle of tagging and including each response body field.We may want to include a short bulleted list detailing any differences. For example, `hits` means something different for kNN.
743208667-80378-u	I think asciidoc requires an empty line to render this correctly.\r\n```suggestion\r\n\r\n* In <<query-dsl-script-score-query,`script_score`>> queries to score\r\n```
744696949-80378-u	May be a better way to phrase it would be something like: "returns top K documents as found by k-nearest search".    
743699350-80378-u	I'd include the acronym whenever we spell out k-nearest neighbor. I also don't think we need `returns matching documents`, but it's fine if you want to keep it.\r\n\r\n```suggestion\r\nPerforms a k-nearest neighbor (kNN) search.\r\n```
743738329-80378-u	Not a huge deal, but I'd consider moving the last sentence into the `knn.field` param definition. It's sort of a requirement for that param.    I overlooked this in dense vector docs PR, but it may be good to note there that the `index` parameter isn't dynamic/updateable.
744702554-80378-u	May be we can add that `query_vector` must have the same dims as an indexed field it searches against. Although it is also kind of obvious, so not sure if it is worth to add. 
743755177-80378-u	We don't really describe the high-level process for gathering candidates from each shard and then collating the results. IIUC that and HSNW are the two main factors that can affect accuracy.\r\n\r\nShould we mention that in the API description or save it for the high-level guide?
744706826-80378-u	I agree with @jrodewig it would be nice to add more details here how this `num_candidates` works, for example: "{es}  collects from each shard  the top `num_candidates` results, and then merges collected from the shards results to get the top k results.  Increasing `num_candidates` tends to improve the accuracy of the final `k` results..."
743764862-80378-u	I'd specifically mention search API here as we have a number of search-related APIs now.\r\n```suggestion\r\nA kNN search response has the same structure as a\r\n<<search-api-response-body, search API response>>. However, certain sections take\r\n```
744696949-80378-u	 May be a better way to phrase it would be something like: "returns top K documents as found by k-nearest search".    
744699322-80378-u	`// TEST[setup:my_index]`, adding to @jrodewig, also looks like the index name is different.
744702554-80378-u	May be we can add that `query_vector` must have the same dims as an indexed field it searches against. Although it is also kind of obvious, so not sure if it is worth to add. 
744706826-80378-u	I agree with @jrodewig it would be nice to add more details here how this `num_candidates` works, for example: "{es}  collects from each shard  the top `num_candidates` results, and then merges collected from the shards results to get the top k results.  Increasing `num_candidates` tends to improve the accuracy of the final `k` results..."
745129823-80378-u	Is it something that we forbid explicitly ? I didn't test but it should work transparently since we use the search action internally. 
745784982-80378-u	IMO we're protected by the experimental status. CCS works out of the box and there's nothing that prevents us from removing the support later on. I don't see why we would though so I am not sure we need the NOTE at the moment. 
743185460-80375-u	Certificates and keys are not printed to the terminal , only the password for elastic user and the enrolment token of Kibana 
743186718-80375-u	Let’s remove this section entirely. The reconfigure tool is meant to be used only for packaged installations. The use case doesn’t apply to archives.
743190277-80375-u	A word is missing here ? “is as a” reads strange
742997579-80346-u	Did you intend to uncomment `randomBoolean()`?
742874588-80336-u	Since these are exactly the same strings, it's difficult to tell whether the merging actually happened in the right order from this test. Could you change one of the formats?
742860690-80306-u	should dot_product -> cosine_similarity? 
742474308-80306-u	This puts the valid values in a collapsible section that defaults to open. Also adds a matching asterisk for \"Required.\"\r\n```suggestion\r\n^*^ If `index` is `true`, this parameter is required.\r\n+\r\n.Valid values for `similarity`\r\n[%collapsible%open]\r\n====\r\n```
742475634-80306-u	I think we should update the other field types to remove the `[horizontal]` attribute and use formatting similar to the parameter definitions in our API docs.\r\n\r\nI left a few comments to:\r\n\r\n- Add collapsible sections for nested value/properties.\r\n- Add required and data type for each parameter.
742888096-80306-u	I think we should mention this in the `index_options` definition and remove the snippet here.
742891942-80306-u	Adds required and data type. We mark parameters required in some situations with an asterisk.\r\n```suggestion\r\n`similarity`::\r\n(Required^*^, string)\r\nThe vector similarity metric to use in kNN search. Documents are ranked by\r\n```
742903505-80306-u	Adds a collapsible section + required and data type.\r\n```suggestion\r\nexpense of slower indexing speed. \r\n+\r\n.Properties of `index_options`\r\n[%collapsible%open]\r\n====\r\n`type`:::\r\n(Required, string)\r\n```
743094606-80306-u	I think this got lost or I forgot to suggest it, but this closes the collapsible section. This should fix the broken docs CI test.\r\n```suggestion\r\n====\r\n+\r\n```
744571505-80286-u	You can use `Map.of()` here
744573042-80286-u	Or maybe this should be a method on `NumericType`: `fielddataBuilder(String name)`?
744582191-80286-u	Can you add some javadocs to give an idea of what this is used for?
745169550-80286-u	Tiny comment, maybe better to supply a non-null `ScriptField` that throws `UnsupportedOperationException`?
745649433-80286-u	Is this always `BooleanDocValuesField::new`? In which case we can probably get away without having a field here?
745655373-80286-u	Maybe `getFieldDataBuilder` to distinguish it from the various other Builder classes we have floating around
742082585-80282-u	Sorry, I think I misspoke in my earlier comment. What I meant to say is that multiplying the `avg_inference_time` with the `inference_count` per node and then dividing that with the number of nodes won't give us a correct measurement. We'd need to divide with the sum of `inference_count`. So, if we want this stat we need to calculate it manually.
745765574-80268-u	We don't need to introduce this new type check here.
742778463-80267-u	Its possible that `bert: {}` is provided, so `truncate` would be `null` and then throw an NPE when you call `.toString()`
743616657-80253-u	This part right here seems off. Perhaps accidentally committed? WIP that was meant to be removed?
743617623-80253-u	Little wording/formatting nit -- maybe \"on headers [HeaderA, HeaderB, HeaderC]\"? What do you think?
746951133-80617-nu	Is this comment now redundant?
745724524-80532-nu	I initially thought we should filter these on ones where job allocation is enabled, then I saw we are taking advantage of the side-effect of not setting memory limits on the node unless it has the `ml` role.     This seems possibly unsafe. It would be nice to filter by role here to be explicit and pass in the list of nodes.What do you think?
964379163-80531-nu	Saddened to lose the deployment stats API I had grown accustomed to it.Still LGTM@elastic/ml-ui this PR changes the format of the GET model stats response"
745917935-80524-nu	I think one of the issues the Dockerhub folks had was with the fact we're using a multi-stage build. Can we eliminate this given all we're doing now in this stage is unpacking ES and adding tini?
745318688-80493-nu	I wonder if we should not just copy the list every time, interning it, rather than this optimization? The only thing we are saving is this array, but we still copy the list anyway so hardly seems worth the complexity added here.
746332328-80493-nu	I would prefer to omit this then. As mentioned above, this is not on the hot path. And if we want to optimize it further, it seems more intuitive to do so in the builder, since we could intern the strings in the list in `putList` and assume all lists are interned (and immutable) always (and likewise for keys).If follow-up work requires this we can re-add it, but I find this too much of half an optimization in the current state.
744535214-80475-nu	I think we can take this further, let's have two static final values here, `FIELD_DATA_ENABLED` and `FIELD_DATA_DISABLED`, with a static selector method that returns either one of them, and keep the constructor private so that we only ever use these two instances.
802652963-80462-nu	Second version looks great! LGTM!
744784193-80462-nu	I just had one minor question for my own curiosity, does this work exactly the same for all JDK versions? Does it make sense for us to do this only for JDK17 where the warning is shown? I'm thinking more along the lines of 7.16 and the various supported JDK versions we run/test with.
800190628-80450-nu	LGTM! The toString changes are awesome.
963216805-80450-nu	A question about the original issue, does it make sense to backport this fix to 7.16 as well?
744519427-80439-nu	Can the wire type of the field be changed like this between versions?
800067654-80406-nu	Left 2 questions. Other than that this looks good to me.
744686771-80406-nu	Maybe also remove this listener if flushEnable is being set to true? (using `ClusterService#removeListener`) That way there is no need to to keep checking whether flush has been enabled after ilm policy / template has been added.
745489828-80406-nu	I missed the fact that `ClusterService#removeListener` was already being invoked, so this comment is not relevant and can be resolved
743420512-80389-nu	I don't understand why the regex needs a `.` in place of a space. Can you explain?
743758446-80378-nu	These look great. I particularly like the use of "field pattern."
798271250-80378-nu	This looks good so far! I'd take the same approach you have.Tag + reuse is probably a good fit for the query + request body params, but I think it's overkill for the response. We should just link users to the existing search API response body docs and concisely point out any differences.
798945002-80378-nu	This looks great. I left some comments and suggestions, but feel free to disregard as wanted. Nothing is blocking, aside from a syntax error in the stored_fields def. Thanks!
743757110-80378-nu	Tried to reword this to avoid passive voice. Not a big deal if left as is tho.```suggestion* The <<search-api-response-body-score,document `_score`>> measures```
743758446-80378-nu	These look great. I particularly like the use of "field pattern."
743758726-80378-nu	Oof. I can't believe this wasn't documented. Thanks for catching it.
746097942-80374-nu	Any particular reason these are fully qualified?
742884876-80337-nu	Could this exception be more specific? I wonder if this would be a place we could use the MapperParsingException that we previously had in the validation logic.
742890617-80337-nu	With this exception the caller gets the problematic mapping back, I'm not sure if that is the case after this change where the CompressedXContent ctor throws an IAE. Maybe it would be worth double checking that we're not loosing potentially useful information in the new places where the exceptions are thrown. Maybe we can try/catch and rethrow MapperParsingException in several places where we have the problematic mapping at hand.
742900158-80337-nu	Out of curiosity: does this operation involve decompressing the mapping source now? This probably would mean slightly more time spent here in the future, I guess that is negligable but would like to understand the tradeoffs if there are any.
742892436-80337-nu	Would it make sense and be possible to modify the test so we check the exception that is thrown earlier then? Or are there reasons why this is complicated, I haven't checked what that would mean.
798752733-80337-nu	Thanks for the answers to my questions, makes sense to me now.
742316275-80306-nu	Sorry for accidentally deleting this. I was deleting some of my own comments from a pending review and accidentally clicked the wrong one. 🤦
742483355-80306-nu	The link will help, but this feels a little cryptic to me. Should we mention the kNN search API directly?
742866336-80306-nu	may be better say, the maximum number of neighbour connections each node can have in the HNSW graph?
743088128-80306-nu	My interpretation was that it is an upper bound, in the sense that we don't allow to have more neighbours than `m`, and will prune the worst to have the number of neighbours always under `m`.   
743093649-80306-nu	I didn't have a particular guideline or philosophy in mind. My thinking was that the HNSW info is only applicable if `index` is `true`, and that might be good to know before I create a mapping.    However, I don't feel strongly about it. I'm good with leaving it here, particularly if we want to keep the intro to this section concise.
800693365-80286-nu	This approach looks good to me. As we discussed offline, it mirrors the approach some field types take where they introduce a  "script function" like `Function<SortedSetDocValues, ScriptDocValues<?>>` to make the conversation behavior depend on the field type.
742025450-80282-nu	I wonder if the total time makes much sense. Especially when `model_threads` is > 1, it doesn't tell us much. On the other hand, it'd be useful to have stats on the `avg_inference_time` so maybe we can just collect stats for that?
742028503-80282-nu	Would it be useful to also have stats on number of pending requests? I'm not 100% sure.
742669020-80282-nu	Note that we could provide min/max of the avg inference time across nodes. But I'm not sure that makes much sense. Total makes no sense at all. So, if we stick to only providing the avg inference time across nodes, should we rename this to `average_inference_time_ms` to match the field from the _stats API? Also, the value could be the actual value directly.
742937776-80282-nu	Ah, yes. All this time I didn't realise we used that accumulator for the counts. :+1:
742740134-80282-nu	we want all the stats for average, max, min. StatsAccumulator gives us that.
742671063-80282-nu	We might as well not use a `StatsAccumulator` here. I think it'd be clearer what's happening if we have local vars for the sum and the count. Not feeling strong about this, so change it only if you agree it'd be clearer.
742779396-80267-nu	Is this required? I thought all the extenders of this class already supplied this override, and this is an abstract class.
742828352-80267-nu	Well, thats crazy that the compiler demands an abstract class implement an interface...I wonder if this is because it doesn't know which is which?    Oh well, thanks for adding the documentation!
